const fs = require('fs');
const path = require('path');
const pool = require('../config/database');

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL —Å–∫—Ä–∏–ø—Ç –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param {import('pg').PoolClient} client
 * @param {string} filePath
 */
async function runSqlFile(client, filePath) {
  const sql = fs.readFileSync(filePath, 'utf8');
  if (!sql.trim()) {
    console.warn(`‚ö†Ô∏è  –§–∞–π–ª ${filePath} –ø—É—Å—Ç ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    return;
  }

  console.log(`‚Üí –í—ã–ø–æ–ª–Ω—è–µ–º ${path.basename(filePath)}...`);
  await client.query(sql);
  console.log(`‚úì ${path.basename(filePath)} –≤—ã–ø–æ–ª–Ω–µ–Ω`);
}

async function migrate() {
  const client = await pool.connect();
  const schemaPath = path.resolve(__dirname, '../../database/schema.sql');
  const seedPath = path.resolve(__dirname, '../../database/seed_operators.sql');

  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    await client.query('BEGIN');

    await runSqlFile(client, schemaPath);
    await runSqlFile(client, seedPath);

    await client.query('COMMIT');
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
    process.exitCode = 1;
  } finally {
    client.release();
    await pool.end();
  }
}

migrate();
