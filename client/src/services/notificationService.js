/**
 * patch-017 ¬ß5: Notification Service
 * Handles OS notifications for check additions via Electron API
 */

class NotificationService {
  constructor() {
    this.isElectron = window.electron && window.electron.notifications;
    this.batchQueue = [];
    this.batchTimer = null;
    this.batchInterval = 60000; // 1 minute
    this.lastNotificationTime = 0;
    this.minNotificationInterval = 5000; // –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–µ–∫–µ
   */
  notifyCheckAdded(check) {
    if (!this.isElectron) {
      console.log('[Notifications] Not in Electron, skipping');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const settings = this.getNotificationSettings();
    if (!settings.enabled) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
    if (this.isQuietHours(settings)) {
      console.log('[Notifications] Quiet hours active');
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á –¥–ª—è –º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–æ–¥–∫–∏
    if (settings.mode === 'batch') {
      this.addToBatch(check);
      return;
    }

    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Å —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–º)
    if (settings.mode === 'instant') {
      const now = Date.now();
      if (now - this.lastNotificationTime < this.minNotificationInterval) {
        // –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á
        this.addToBatch(check);
        return;
      }

      this.showInstantNotification(check);
      this.lastNotificationTime = now;
    }
  }

  /**
   * –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  showInstantNotification(check) {
    const title = '‚úÖ –ù–æ–≤—ã–π —á–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω';
    const amount = Math.abs(check.amount || 0);
    const amountStr = amount.toLocaleString('ru-RU', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });
    const body = `${check.operator || '–ù/–î'} ¬∑ ${amountStr} ${check.currency || 'UZS'}`;

    window.electron.notifications.show(title, body, {
      checkId: check.check_id || check.id,
      type: 'instant'
    });
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫ –≤ –±–∞—Ç—á –¥–ª—è –º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–æ–¥–∫–∏
   */
  addToBatch(check) {
    this.batchQueue.push(check);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if (!this.batchTimer) {
      this.batchTimer = setTimeout(() => {
        this.flushBatch();
      }, this.batchInterval);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞—Ç—á-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  flushBatch() {
    if (this.batchQueue.length === 0) {
      this.batchTimer = null;
      return;
    }

    const count = this.batchQueue.length;
    const totalAmount = this.batchQueue.reduce((sum, check) => {
      return sum + Math.abs(check.amount || 0);
    }, 0);

    const amountStr = totalAmount.toLocaleString('ru-RU', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });

    const title = `üìä –î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ–∫–æ–≤: ${count}`;
    const body = `–û–±—â–∞—è —Å—É–º–º–∞: ${amountStr} UZS\n–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞`;

    window.electron.notifications.show(title, body, {
      type: 'batch',
      count,
      totalAmount
    });

    // –û—á–∏—â–∞–µ–º –±–∞—Ç—á
    this.batchQueue = [];
    this.batchTimer = null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
   */
  isQuietHours(settings) {
    if (!settings.quietHoursEnabled) {
      return false;
    }

    const now = new Date();
    const currentHour = now.getHours();
    const currentMinutes = currentHour * 60 + now.getMinutes();

    const [startHour, startMin] = (settings.quietHoursStart || '23:00').split(':').map(Number);
    const [endHour, endMin] = (settings.quietHoursEnd || '07:00').split(':').map(Number);

    const startMinutes = startHour * 60 + startMin;
    const endMinutes = endHour * 60 + endMin;

    // –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
    if (startMinutes > endMinutes) {
      return currentMinutes >= startMinutes || currentMinutes < endMinutes;
    } else {
      return currentMinutes >= startMinutes && currentMinutes < endMinutes;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ localStorage
   */
  getNotificationSettings() {
    try {
      const stored = localStorage.getItem('notification-settings');
      if (stored) {
        return JSON.parse(stored);
      }
    } catch (error) {
      console.error('Error loading notification settings:', error);
    }

    // Defaults
    return {
      enabled: true,
      mode: 'batch', // instant, batch, disabled
      quietHoursEnabled: false,
      quietHoursStart: '23:00',
      quietHoursEnd: '07:00'
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  saveNotificationSettings(settings) {
    try {
      localStorage.setItem('notification-settings', JSON.stringify(settings));
    } catch (error) {
      console.error('Error saving notification settings:', error);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
   */
  init(onNotificationClick) {
    if (!this.isElectron) {
      console.log('[Notifications] Not in Electron environment');
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
    window.electron.notifications.onClick((data) => {
      console.log('[Notifications] Clicked:', data);
      if (onNotificationClick) {
        onNotificationClick(data);
      }
    });

    console.log('[Notifications] Service initialized');
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  cleanup() {
    if (this.batchTimer) {
      clearTimeout(this.batchTimer);
      this.batchTimer = null;
    }

    if (this.isElectron) {
      window.electron.notifications.removeClickListener();
    }
  }
}

// Singleton instance
const notificationService = new NotificationService();

export default notificationService;
