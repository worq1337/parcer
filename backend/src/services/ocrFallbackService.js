const OpenAI = require('openai');
const parserService = require('./parserService');

const DEFAULT_MODEL = process.env.OCR_FALLBACK_MODEL || process.env.OPENAI_MODEL || 'gpt-4o';

const JSON_SCHEMA = {
  name: 'ocr_result',
  schema: {
    type: 'object',
    additionalProperties: false,
    required: ['text', 'confidence', 'fields'],
    properties: {
      text: { type: 'string' },
      confidence: { type: 'number' },
      fields: {
        type: 'object',
        additionalProperties: false,
        required: [
          'datetime',
          'transactionType',
          'amount',
          'isIncome',
          'currency',
          'cardLast4'
        ],
        properties: {
          datetime: { type: 'string' },
          transactionType: { type: 'string' },
          amount: { type: ['number', 'string'] },
          isIncome: { type: 'boolean' },
          currency: { type: 'string' },
          cardLast4: { type: 'string' },
          operator: { type: 'string' },
          balance: { type: ['number', 'string', 'null'] },
          confidence: { type: ['number', 'null'] }
        }
      }
    }
  },
  strict: true
};

class OcrFallbackService {
  constructor() {
    this.enabled = process.env.OCR_FALLBACK_ENABLED !== 'false';
    const apiKey = process.env.OPENAI_API_KEY;

    if (!apiKey) {
      this.enabled = false;
      return;
    }

    this.openai = new OpenAI({ apiKey });
  }

  isEnabled() {
    return this.enabled && Boolean(this.openai);
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–∞ —á–µ—Ä–µ–∑ GPT-–≤–∏–∑–∏–æ–Ω
   * @param {Object} options
   * @param {string} options.imageBase64 - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
   * @param {string} options.source - –∏—Å—Ç–æ—á–Ω–∏–∫ (telegram/manual)
   * @param {string} [options.mimeType] - MIME —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {Object} [options.meta] - –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async processImage({ imageBase64, source = 'manual', mimeType = 'image/png', meta = {} }) {
    if (!this.isEnabled()) {
      return {
        success: false,
        status: 'error',
        error: 'OCR fallback –æ—Ç–∫–ª—é—á—ë–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPENAI_API_KEY –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OCR_FALLBACK_ENABLED=false'
      };
    }

    try {
      const prompt = this.buildPrompt(meta);
      const response = await this.callModel({
        model: DEFAULT_MODEL,
        temperature: 0.1,
        max_tokens: 900,
        messages: [
          {
            role: 'system',
            content: '–¢—ã OCR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò–∑–≤–ª–µ–∫–∞–π —Ç–µ–∫—Å—Ç —á–µ–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.'
          },
          {
            role: 'user',
            content: [
              { type: 'text', text: prompt },
              {
                type: 'image_url',
                image_url: {
                  url: `data:${mimeType};base64,${imageBase64}`,
                  detail: 'auto'
                }
              }
            ]
          }
        ]
      });

      const rawMessage = this.extractText(response);
      const cleaned = this.cleanJsonString(rawMessage);
      const parsed = JSON.parse(cleaned);

      if (!parsed?.fields) {
        throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è');
      }

      const ocrText = (parsed.text || '').trim();
      const fields = this.normalizeFields(parsed.fields);
      const processedData = await parserService.postProcessData(fields, ocrText, source);

      return {
        success: true,
        status: 'parsed',
        ocr_result: {
          text: ocrText,
          confidence: this.normalizeConfidence(parsed.confidence)
        },
        parsed_data: {
          classifier: 'GPTVisionFallback',
          confidence: this.normalizeConfidence(parsed.fields?.confidence ?? parsed.confidence),
          data: processedData
        },
        preprocessing: {
          steps_applied: ['gpt-vision'],
          note: 'Primary OCR fallback'
        }
      };
    } catch (error) {
      const message = error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ GPT OCR fallback';
      console.error('GPT OCR fallback failed:', message);
      return {
        success: false,
        status: 'error',
        error: `OCR fallback –æ—à–∏–±–∫–∞: ${message}`
      };
    }
  }

  async callModel(options, { useSchema = true } = {}) {
    if (!this.openai) {
      throw new Error('OpenAI client not initialised');
    }

    const payload = {
      ...options,
      response_format: useSchema ? { type: 'json_object' } : undefined
    };

    if (!useSchema) {
      delete payload.response_format;
    }

    try {
      return await this.openai.chat.completions.create(payload);
    } catch (error) {
      if (useSchema && this.isResponseFormatUnsupported(error)) {
        console.warn(`Model ${DEFAULT_MODEL} does not support json_object response. Retrying without schema.`);
        return this.callModel(options, { useSchema: false });
      }

      if (this.isRateLimitError(error)) {
        throw new Error('OpenAI rate limit exceeded for OCR fallback.');
      }

      throw error;
    }
  }

  extractText(response) {
    if (!response) return '';

    // Standard chat.completions API response format
    const content = response?.choices?.[0]?.message?.content;
    if (typeof content === 'string') {
      return content;
    }

    return '';
  }

  isResponseFormatUnsupported(error) {
    const status = error?.status ?? error?.response?.status;
    const message = error?.error?.message || error?.response?.data?.error?.message || error?.message || '';

    if (status !== 400) {
      return false;
    }

    return message.toLowerCase().includes('response_format');
  }

  isRateLimitError(error) {
    const status = error?.status ?? error?.response?.status ?? error?.code;
    if (Number(status) === 429) {
      return true;
    }

    const message = error?.error?.message || error?.response?.data?.error?.message || error?.message || '';
    return message.toLowerCase().includes('rate limit');
  }

  buildPrompt(meta) {
    const hints = [];
    if (meta?.bank) {
      hints.push(`–ë–∞–Ω–∫: ${meta.bank}`);
    }
    if (meta?.locale) {
      hints.push(`–õ–æ–∫–∞–ª—å: ${meta.locale}`);
    }

    return [
      '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —á–µ–∫–∞ –∏ –≤–µ—Ä–Ω–∏ JSON —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞:',
      '',
      '{',
      '  "text": "–ø–æ–ª–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",',
      '  "confidence": 0-100,',
      '  "fields": {',
      '    "datetime": "YYYY-MM-DD HH:MM:SS",',
      '    "transactionType": "–û–ø–ª–∞—Ç–∞|–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ|–°–ø–∏—Å–∞–Ω–∏–µ|–ü–ª–∞—Ç–µ–∂|–ü–µ—Ä–µ–≤–æ–¥|–ö–æ–Ω–≤–µ—Ä—Å–∏—è|–í–æ–∑–≤—Ä–∞—Ç|–û–ø–µ—Ä–∞—Ü–∏—è",',
      '    "amount": —á–∏—Å–ª–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∞),',
      '    "isIncome": true|false,',
      '    "currency": "UZS|USD|RUB|..."',
      '    "cardLast4": "1234",',
      '    "operator": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞/–±–∞–Ω–∫–∞/–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",',
      '    "balance": —á–∏—Å–ª–æ –∏–ª–∏ null',
      '  }',
      '}',
      '',
      '‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –°–£–ú–ú:',
      '- amount –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ß–ò–°–õ–û–ú –ë–ï–ó –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø: 1650000.00 (–ù–ï "1,650,000.00")',
      '- –ó–∞–ø—è—Ç—ã–µ, –ø—Ä–æ–±–µ–ª—ã, –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –≤ —Å—É–º–º–∞—Ö - —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á, –ù–ï –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ!',
      '- –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:',
      '  ‚Ä¢ "1,650,000.00 UZS" -> amount: 1650000',
      '  ‚Ä¢ "1 650 000.00" -> amount: 1650000',
      '  ‚Ä¢ "150\'000.50" -> amount: 150000.50',
      '  ‚Ä¢ "250,00" -> amount: 250',
      '',
      'üìù P2P –ü–ï–†–ï–í–û–î–´ (–µ—Å–ª–∏ –≤ —á–µ–∫–µ –µ—Å—Ç—å Sender –∏ Receiver):',
      '- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å "Sender"/"Receiver" –∏–ª–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"/"–ü–æ–ª—É—á–∞—Ç–µ–ª—å" - —ç—Ç–æ P2P –ø–µ—Ä–µ–≤–æ–¥',
      '- transactionType –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–ü–µ—Ä–µ–≤–æ–¥"',
      '- amount –±–µ—Ä—ë–º –∏–∑ "Receiver amount" (—Å—É–º–º–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è)',
      '- cardLast4 - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã Receiver (–ø–æ–ª—É—á–∞—Ç–µ–ª—è)',
      '- operator - –∏–º—è Sender (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è) –µ—Å–ª–∏ isIncome=true, –∏–Ω–∞—á–µ –∏–º—è Receiver',
      '',
      '–û–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:',
      '- –î–∞–π –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é (–≥–æ–¥ 4 —Ü–∏—Ñ—Ä—ã, —á–∞—Å—ã/–º–∏–Ω—É—Ç—ã/—Å–µ–∫—É–Ω–¥—ã 2 —Ü–∏—Ñ—Ä—ã).',
      '- –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –æ—Ü–µ–Ω–∏ –µ—ë –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏ —É–∫–∞–∂–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS.',
      '- amount –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, isIncome –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞–∫ (false -> —Ä–∞—Å—Ö–æ–¥).',
      '- cardLast4 —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç, –ø–æ—Å—Ç–∞–≤—å "0000".',
      '- –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è, –Ω–æ –ø–æ—Å—Ç–∞–≤—å confidence <= 40.',
      '- –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.',
      '',
      hints.length ? `–ü–æ–¥—Å–∫–∞–∑–∫–∏: ${hints.join(', ')}` : ''
    ].join('\n');
  }

  cleanJsonString(value) {
    return value
      .replace(/^```json\s*/i, '')
      .replace(/^```\s*/i, '')
      .replace(/\s*```$/i, '')
      .trim();
  }

  normalizeFields(fields) {
    const safeAmount = Number.parseFloat(fields.amount);
    const amount = Number.isFinite(safeAmount) ? Math.abs(safeAmount) : 0;

    return {
      datetime: fields.datetime,
      transactionType: fields.transactionType || '–û–ø–µ—Ä–∞—Ü–∏—è',
      amount,
      isIncome: Boolean(fields.isIncome),
      currency: fields.currency || 'UZS',
      cardLast4: this.normalizeCard(fields.cardLast4),
      operator: fields.operator || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      balance: this.normalizeOptionalNumber(fields.balance)
    };
  }

  normalizeCard(value) {
    if (!value) {
      return '0000';
    }
    const digits = String(value).replace(/\D/g, '');
    if (digits.length >= 4) {
      return digits.slice(-4);
    }
    return digits.padStart(4, '0');
  }

  normalizeOptionalNumber(value) {
    if (value === null || value === undefined || value === '') {
      return null;
    }
    const num = Number.parseFloat(value);
    return Number.isFinite(num) ? num : null;
  }

  normalizeConfidence(value) {
    const num = Number.parseFloat(value);
    if (!Number.isFinite(num)) {
      return 55;
    }
    return Math.max(1, Math.min(100, Math.round(num)));
  }
}

module.exports = new OcrFallbackService();
