{
  "version": 3,
  "sources": ["../r2-proxy.js"],
  "sourceRoot": "./dist",
  "sourcesContent": ["/**\n * Cloudflare Worker \u0434\u043B\u044F \u043F\u0443\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E \u0434\u043E\u0441\u0442\u0443\u043F\u0430 \u043A R2 bucket\n * \u0420\u0430\u0437\u0432\u0435\u0440\u043D\u0438\u0442\u0435 \u044D\u0442\u043E\u0442 worker \u0438 \u043F\u0440\u0438\u0432\u044F\u0436\u0438\u0442\u0435 \u043A R2 bucket\n */\n\nexport default {\n  async fetch(request, env) {\n    const url = new URL(request.url);\n    const key = url.pathname.slice(1); // \u0423\u0431\u0438\u0440\u0430\u0435\u043C \u043F\u0435\u0440\u0432\u044B\u0439 \u0441\u043B\u044D\u0448\n\n    // \u0422\u043E\u043B\u044C\u043A\u043E GET \u0437\u0430\u043F\u0440\u043E\u0441\u044B\n    if (request.method !== 'GET' && request.method !== 'HEAD') {\n      return new Response('Method Not Allowed', { status: 405 });\n    }\n\n    try {\n      // \u041F\u043E\u043B\u0443\u0447\u0430\u0435\u043C \u043E\u0431\u044A\u0435\u043A\u0442 \u0438\u0437 R2\n      const object = await env.RECEIPT_PARSER_UPDATES.get(key);\n\n      if (object === null) {\n        return new Response('Not Found', { status: 404 });\n      }\n\n      // \u041E\u043F\u0440\u0435\u0434\u0435\u043B\u044F\u0435\u043C Content-Type\n      const headers = new Headers();\n      object.writeHttpMetadata(headers);\n      headers.set('etag', object.httpEtag);\n\n      // \u0414\u043B\u044F .yml \u0444\u0430\u0439\u043B\u043E\u0432 - no-cache\n      if (key.endsWith('.yml')) {\n        headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      } else {\n        // \u0414\u043B\u044F \u0431\u0438\u043D\u0430\u0440\u043D\u0438\u043A\u043E\u0432 - \u0434\u043E\u043B\u0433\u0438\u0439 \u043A\u0435\u0448\n        headers.set('Cache-Control', 'public, max-age=31536000, immutable');\n      }\n\n      // CORS \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0438 (\u0435\u0441\u043B\u0438 \u043D\u0443\u0436\u043D\u043E)\n      headers.set('Access-Control-Allow-Origin', '*');\n\n      return new Response(object.body, {\n        headers,\n      });\n    } catch (error) {\n      return new Response('Internal Server Error: ' + error.message, { status: 500 });\n    }\n  },\n};\n"],
  "mappings": ";AAKA,IAAO,mBAAQ;AAAA,EACb,MAAM,MAAM,SAAS,KAAK;AACxB,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,UAAM,MAAM,IAAI,SAAS,MAAM,CAAC;AAGhC,QAAI,QAAQ,WAAW,SAAS,QAAQ,WAAW,QAAQ;AACzD,aAAO,IAAI,SAAS,sBAAsB,EAAE,QAAQ,IAAI,CAAC;AAAA,IAC3D;AAEA,QAAI;AAEF,YAAM,SAAS,MAAM,IAAI,uBAAuB,IAAI,GAAG;AAEvD,UAAI,WAAW,MAAM;AACnB,eAAO,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,MAClD;AAGA,YAAM,UAAU,IAAI,QAAQ;AAC5B,aAAO,kBAAkB,OAAO;AAChC,cAAQ,IAAI,QAAQ,OAAO,QAAQ;AAGnC,UAAI,IAAI,SAAS,MAAM,GAAG;AACxB,gBAAQ,IAAI,iBAAiB,qCAAqC;AAAA,MACpE,OAAO;AAEL,gBAAQ,IAAI,iBAAiB,qCAAqC;AAAA,MACpE;AAGA,cAAQ,IAAI,+BAA+B,GAAG;AAE9C,aAAO,IAAI,SAAS,OAAO,MAAM;AAAA,QAC/B;AAAA,MACF,CAAC;AAAA,IACH,SAAS,OAAO;AACd,aAAO,IAAI,SAAS,4BAA4B,MAAM,SAAS,EAAE,QAAQ,IAAI,CAAC;AAAA,IAChF;AAAA,EACF;AACF;",
  "names": []
}
