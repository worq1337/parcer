import React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import { toast } from 'react-toastify';
import { checksAPI } from '../services/api';
import { exportToExcel } from '../utils/excelExport';
import { formatAmount, formatBalance, formatCardLast4 } from '../utils/formatters';
import { useSettingsStore } from '../state/settingsStore';
import '../styles/ChecksTable.css';

const DEBIT_TRANSACTION_TYPES = ['–û–ø–ª–∞—Ç–∞', '–°–ø–∏—Å–∞–Ω–∏–µ', 'E-Com', '–ü–ª–∞—Ç—ë–∂'];

const ChecksTable = ({ refreshTrigger, onCheckDetails, onRefresh }) => {
  const [checks, setChecks] = useState([]);
  const [loading, setLoading] = useState(false);
  const numberFormatting = useSettingsStore((state) => state.numberFormatting);
  const gridRef = useRef(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const loadChecks = useCallback(async () => {
    setLoading(true);
    try {
      const response = await checksAPI.getAll();
      setChecks(response.data || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–æ–≤:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫–∏');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    loadChecks();
  }, [loadChecks, refreshTrigger]);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
  const columnDefs = useMemo(() => [
    {
      headerName: '‚Ññ',
      field: 'id',
      width: 80,
      filter: 'agNumberColumnFilter',
      pinned: 'left'
    },
    {
      headerName: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è',
      field: 'datetime',
      width: 180,
      filter: 'agDateColumnFilter',
      valueFormatter: params => {
        if (!params.value) return '';
        const date = new Date(params.value);
        return date.toLocaleString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
      }
    },
    {
      headerName: '–î.–Ω.',
      field: 'weekday',
      width: 70,
      filter: 'agTextColumnFilter'
    },
    {
      headerName: '–î–∞—Ç–∞',
      field: 'date_display',
      width: 100,
      filter: 'agTextColumnFilter'
    },
    {
      headerName: '–í—Ä–µ–º—è',
      field: 'time_display',
      width: 90,
      filter: 'agTextColumnFilter'
    },
    {
      headerName: '–û–ø–µ—Ä–∞—Ç–æ—Ä/–ü—Ä–æ–¥–∞–≤–µ—Ü',
      field: 'operator',
      width: 300,
      filter: 'agTextColumnFilter',
      flex: 1
    },
    {
      headerName: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
      field: 'app',
      width: 150,
      filter: 'agTextColumnFilter',
      valueFormatter: params => params.value || '‚Äî'
    },
    {
      headerName: '–°—É–º–º–∞',
      field: 'amount',
      width: 150,
      filter: 'agNumberColumnFilter',
      valueFormatter: (params) => {
        if (params.value === null || params.value === undefined) {
          return '';
        }

        const numericValue = typeof params.value === 'number' ? params.value : Number(params.value);
        if (Number.isNaN(numericValue)) {
          return String(params.value);
        }

        return formatAmount(numericValue, numberFormatting);
      },
      cellStyle: params => {
        if (!params.value) return null;
        return {
          color:
            params.value >= 0
              ? 'var(--status-success)'
              : 'var(--status-error)',
          fontWeight: 'bold'
        };
      }
    },
    {
      headerName: '–û—Å—Ç–∞—Ç–æ–∫',
      field: 'balance',
      width: 150,
      filter: 'agNumberColumnFilter',
      valueFormatter: params => {
        if (!params.value) return '‚Äî';
        return formatBalance(params.value, numberFormatting);
      }
    },
    {
      headerName: '–ü–ö',
      field: 'card_last4',
      width: 90,
      filter: 'agTextColumnFilter',
      valueFormatter: params => formatCardLast4(params.value)
    },
    {
      headerName: 'P2P',
      field: 'is_p2p',
      width: 80,
      filter: 'agTextColumnFilter',
      valueFormatter: params => params.value ? '‚úì' : '',
      cellStyle: { textAlign: 'center' }
    },
    {
      headerName: '–¢–∏–ø',
      field: 'transaction_type',
      width: 130,
      filter: 'agTextColumnFilter'
    },
    {
      headerName: '–í–∞–ª—é—Ç–∞',
      field: 'currency',
      width: 90,
      filter: 'agTextColumnFilter'
    },
    {
      headerName: '–ò—Å—Ç–æ—á–Ω–∏–∫',
      field: 'source',
      width: 110,
      filter: 'agTextColumnFilter'
    }
  ], [numberFormatting]);

  useEffect(() => {
    if (gridRef.current?.api) {
      gridRef.current.api.refreshCells({ columns: ['amount'], force: true });
    }
  }, [numberFormatting.thousandsSeparator, numberFormatting.decimalSeparator]);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
  const defaultColDef = useMemo(() => ({
    sortable: true,
    filter: true,
    resizable: true,
    floatingFilter: true
  }), []);

  // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è AG-Grid –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
  const localeText = useMemo(() => ({
    // –§–∏–ª—å—Ç—Ä—ã
    filterOoo: '–§–∏–ª—å—Ç—Ä...',
    equals: '–†–∞–≤–Ω–æ',
    notEqual: '–ù–µ —Ä–∞–≤–Ω–æ',
    lessThan: '–ú–µ–Ω—å—à–µ —á–µ–º',
    greaterThan: '–ë–æ–ª—å—à–µ —á–µ–º',
    lessThanOrEqual: '–ú–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ',
    greaterThanOrEqual: '–ë–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ',
    inRange: '–í –¥–∏–∞–ø–∞–∑–æ–Ω–µ',
    contains: '–°–æ–¥–µ—Ä–∂–∏—Ç',
    notContains: '–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç',
    startsWith: '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å',
    endsWith: '–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞',
    blank: '–ü—É—Å—Ç–æ',
    notBlank: '–ù–µ –ø—É—Å—Ç–æ',
    andCondition: '–ò',
    orCondition: '–ò–õ–ò',
    // –ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
    applyFilter: '–ü—Ä–∏–º–µ–Ω–∏—Ç—å',
    clearFilter: '–û—á–∏—Å—Ç–∏—Ç—å',
    resetFilter: '–°–±—Ä–æ—Å–∏—Ç—å',
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    page: '–°—Ç—Ä–∞–Ω–∏—Ü–∞',
    to: '–¥–æ',
    of: '–∏–∑',
    more: '–µ—â—ë',
    next: '–°–ª–µ–¥—É—é—â–∞—è',
    last: '–ü–æ—Å–ª–µ–¥–Ω—è—è',
    first: '–ü–µ—Ä–≤–∞—è',
    previous: '–ü—Ä–µ–¥—ã–¥—É—â–∞—è',
    // –í—ã–±–æ—Ä —Å—Ç—Ä–æ–∫
    selectAll: '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ',
    selectAllSearchResults: '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞',
    searchOoo: '–ü–æ–∏—Å–∫...',
    // –ü—Ä–æ—á–µ–µ
    noRowsToShow: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    enabled: '–í–∫–ª—é—á–µ–Ω–æ',
    // –°—Ç–æ–ª–±—Ü—ã
    columns: '–°—Ç–æ–ª–±—Ü—ã',
    filters: '–§–∏–ª—å—Ç—Ä—ã',
    rowGroupColumns: '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞',
    rowGroupColumnsEmptyMessage: '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏',
    valueColumns: '–ó–Ω–∞—á–µ–Ω–∏—è',
    pivotMode: '–†–µ–∂–∏–º —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã',
    groups: '–ì—Ä—É–ø–ø—ã',
    values: '–ó–Ω–∞—á–µ–Ω–∏—è',
    pivots: '–°—Ç–æ–ª–±—Ü—ã —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã',
    valueColumnsEmptyMessage: '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏',
    pivotColumnsEmptyMessage: '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã',
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    copy: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
    copyWithHeaders: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏',
    paste: '–í—Å—Ç–∞–≤–∏—Ç—å',
    export: '–≠–∫—Å–ø–æ—Ä—Ç'
  }), []);

  // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
  const getContextMenuItems = useCallback((params) => {
    if (!params.node) return [];

    return [
      {
        name: '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏',
        icon: '<span>‚ÑπÔ∏è</span>',
        action: () => {
          onCheckDetails(params.node.data);
        }
      },
      'separator',
      {
        name: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ',
        icon: '<span>üìã</span>',
        action: () => {
          const value = params.value;
          navigator.clipboard.writeText(value);
          toast.success('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        }
      },
      {
        name: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É',
        icon: '<span>üìÑ</span>',
        action: () => {
          const row = params.node.data;
          const text = Object.values(row).join('\t');
          navigator.clipboard.writeText(text);
          toast.success('–°—Ç—Ä–æ–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
        }
      },
      'separator',
      {
        name: '–£–¥–∞–ª–∏—Ç—å',
        icon: '<span>üóëÔ∏è</span>',
        action: async () => {
          if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–µ–∫?')) {
            try {
              await checksAPI.delete(params.node.data.id);
              toast.success('–ß–µ–∫ —É–¥–∞–ª—ë–Ω');
              onRefresh();
            } catch (error) {
              toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–∫–∞');
            }
          }
        }
      },
      'separator',
      {
        name: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
        action: () => {
          const value = params.value;
          navigator.clipboard.writeText(value);
        }
      },
      {
        name: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏',
        action: () => {
          const colDef = params.column.getColDef();
          const header = colDef.headerName || colDef.field;
          const value = params.value;
          const text = `${header}\n${value}`;
          navigator.clipboard.writeText(text);
        }
      },
      {
        name: '–≠–∫—Å–ø–æ—Ä—Ç',
        action: () => {
          handleExport();
        }
      }
    ];
  }, [onCheckDetails, onRefresh]);

  // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
  const onRowDoubleClicked = useCallback((event) => {
    onCheckDetails(event.data);
  }, [onCheckDetails]);

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
  const handleExport = async () => {
    try {
      await exportToExcel(checks);
      toast.success('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel');
    }
  };

  return (
    <div className="checks-table-container">
      <div className="table-toolbar">
        <div className="table-info">
          <span className="info-text">
            –í—Å–µ–≥–æ —á–µ–∫–æ–≤: <strong>{checks.length}</strong>
          </span>
        </div>
        <div className="table-actions">
          <button className="toolbar-button" onClick={handleExport}>
            <span className="button-icon">üìä</span>
            –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
          </button>
        </div>
      </div>

      <div className="ag-theme-alpine" style={{ height: 'calc(100% - 60px)', width: '100%' }}>
        {loading ? (
          <div className="loading-overlay">
            <div className="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
          </div>
        ) : (
          <AgGridReact
            ref={gridRef}
            rowData={checks}
            columnDefs={columnDefs}
            defaultColDef={defaultColDef}
            localeText={localeText}
            getContextMenuItems={getContextMenuItems}
            onRowDoubleClicked={onRowDoubleClicked}
            pagination={true}
            paginationPageSize={50}
            enableCellTextSelection={true}
            ensureDomOrder={true}
            animateRows={true}
            rowSelection="multiple"
            suppressRowClickSelection={true}
          />
        )}
      </div>
    </div>
  );
};

export default ChecksTable;
