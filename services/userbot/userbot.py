"""
patch-017 ¬ß4: Telethon Userbot

–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –±–æ—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö –≤ –Ω–∞—à –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""

import os
import asyncio
import requests
import psycopg2
from datetime import datetime
from telethon import TelegramClient, events
from telethon.tl.types import User, PeerChannel, PeerChat, PeerUser, Channel, Chat
from telethon.tl.types import InputPeerUser, InputPeerChannel, InputPeerChat
import config


class UserbotManager:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telethon userbot

    –§—É–Ω–∫—Ü–∏–∏:
    - –õ–æ–≥–∏–Ω –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
    - –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–∞—à –±–æ—Ç
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º (start/stop)
    """

    def __init__(self):
        self.client = None
        self.is_running = False
        self.session_path = os.path.join(config.SESSION_DIR, config.SESSION_NAME)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.new_message_handler = None

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        self.db_conn = None

    async def initialize(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
        """
        if not config.API_ID or not config.API_HASH:
            raise ValueError("TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        self.client = TelegramClient(
            self.session_path,
            config.API_ID,
            config.API_HASH,
            system_version='4.16.30-vxCUSTOM'
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–æ–º incoming=True
        @self.client.on(events.NewMessage(incoming=True))
        async def message_handler(event):
            await self.handle_new_message(event)

        self.new_message_handler = message_handler

        print("‚úÖ Telethon –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (incoming=True)")

    async def login(self, phone_number, code=None, password=None):
        """
        –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

        Args:
            phone_number: str - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998901234567
            code: str - –∫–æ–¥ –∏–∑ SMS (–µ—Å–ª–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω)
            password: str - 2FA –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)

        Returns:
            dict - —Å—Ç–∞—Ç—É—Å –ª–æ–≥–∏–Ω–∞
        """
        try:
            await self.client.connect()

            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                return {
                    'success': True,
                    'status': 'already_authorized',
                    'user': {
                        'id': me.id,
                        'first_name': me.first_name,
                        'last_name': me.last_name,
                        'username': me.username,
                        'phone': me.phone
                    }
                }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
            if not code:
                await self.client.send_code_request(phone_number)
                return {
                    'success': True,
                    'status': 'code_sent',
                    'message': f'–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone_number}'
                }

            # –í–≤–æ–¥–∏–º –∫–æ–¥
            try:
                await self.client.sign_in(phone_number, code)

                me = await self.client.get_me()
                return {
                    'success': True,
                    'status': 'authorized',
                    'user': {
                        'id': me.id,
                        'first_name': me.first_name,
                        'last_name': me.last_name,
                        'username': me.username,
                        'phone': me.phone
                    }
                }

            except Exception as code_error:
                # –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å
                if 'Two-step verification' in str(code_error) or 'SessionPasswordNeededError' in str(type(code_error)):
                    if not password:
                        return {
                            'success': False,
                            'status': 'password_required',
                            'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å'
                        }

                    await self.client.sign_in(password=password)

                    me = await self.client.get_me()
                    return {
                        'success': True,
                        'status': 'authorized',
                        'user': {
                            'id': me.id,
                            'first_name': me.first_name,
                            'last_name': me.last_name,
                            'username': me.username,
                            'phone': me.phone
                        }
                    }
                else:
                    raise code_error

        except Exception as e:
            return {
                'success': False,
                'status': 'error',
                'error': str(e)
            }

    async def start(self):
        """
        –ó–∞–ø—É—Å–∫ userbot –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        if not self.client:
            await self.initialize()

        await self.client.connect()

        if not await self.client.is_user_authorized():
            return {
                'success': False,
                'error': 'Userbot –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω —Å–Ω–∞—á–∞–ª–∞.'
            }

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await self.client.start()
        self.is_running = True

        me = await self.client.get_me()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤ –∏–∑ Telegram
        bot_names_list = []
        for bot_id in config.MONITOR_BOT_IDS:
            try:
                bot_entity = await self.resolve_entity(bot_id)
                bot_name = bot_entity.first_name or f"ID:{bot_id}"
                bot_names_list.append(f"{bot_name} (@{bot_entity.username})")
            except Exception:
                bot_names_list.append(f"ID:{bot_id}")

        bot_names = ', '.join(bot_names_list)

        print(f"ü§ñ Userbot –∑–∞–ø—É—â–µ–Ω: {me.first_name} (@{me.username})")
        print(f"üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –±–æ—Ç—ã: {bot_names}")
        print(f"üéØ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –±–æ—Ç: {config.OUR_BOT_ID}")

        return {
            'success': True,
            'message': f'Userbot –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {me.first_name}',
            'user': {
                'id': me.id,
                'first_name': me.first_name,
                'last_name': me.last_name,
                'username': me.username,
                'phone': me.phone
            }
        }

    async def stop(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ userbot
        """
        if self.client and self.client.is_connected():
            await self.client.disconnect()

        self.is_running = False

        return {
            'success': True,
            'message': 'Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        }

    async def get_status(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å userbot
        """
        if not self.client:
            return {
                'running': False,
                'authorized': False
            }

        try:
            if not self.client.is_connected():
                await self.client.connect()

            is_authorized = await self.client.is_user_authorized()

            if is_authorized:
                me = await self.client.get_me()
                return {
                    'running': self.is_running,
                    'authorized': True,
                    'user': {
                        'id': me.id,
                        'first_name': me.first_name,
                        'last_name': me.last_name,
                        'username': me.username,
                        'phone': me.phone
                    }
                }
            else:
                return {
                    'running': self.is_running,
                    'authorized': False
                }

        except Exception as e:
            return {
                'running': False,
                'authorized': False,
                'error': str(e)
            }

    def save_message_to_db(self, bot_id, telegram_message_id, text):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        """
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–ø–æ–ª—É—á–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
            if not self.db_conn or self.db_conn.closed:
                self.db_conn = psycopg2.connect(
                    host=os.getenv('DB_HOST', 'postgres'),
                    port=os.getenv('DB_PORT', '5432'),
                    database=os.getenv('DB_NAME', 'receipt_parser'),
                    user=os.getenv('DB_USER', 'postgres'),
                    password=os.getenv('DB_PASSWORD', 'postgres')
                )

            cursor = self.db_conn.cursor()

            # –í—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'unprocessed'
            cursor.execute(
                """INSERT INTO bot_messages
                   (bot_id, telegram_message_id, chat_id, message_id, timestamp, text, status, process_attempts)
                   VALUES (%s, %s, %s, %s, %s, %s, 'unprocessed', 0)
                   ON CONFLICT (chat_id, message_id) DO NOTHING""",
                (
                    str(bot_id),
                    str(telegram_message_id),
                    str(bot_id),
                    str(telegram_message_id),
                    datetime.now(),
                    text
                )
            )

            self.db_conn.commit()
            cursor.close()
            print(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î (bot_id={bot_id})")

        except Exception as db_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")
            if self.db_conn:
                self.db_conn.rollback()

    async def handle_new_message(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏—à–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –±–æ—Ç–æ–≤,
        –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –µ–≥–æ –≤ –Ω–∞—à –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender = await event.get_sender()

            # –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            sender_info = f"{sender.first_name if hasattr(sender, 'first_name') else 'Unknown'} (ID: {sender.id})"
            print(f"üîî –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {sender_info}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –æ–¥–Ω–∏–º –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –±–æ—Ç–æ–≤
            if isinstance(sender, User) and sender.id in config.MONITOR_BOT_IDS:
                bot_name = sender.first_name or f"ID:{sender.id}"
                username = f"@{sender.username}" if sender.username else ""
                print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ {bot_name} {username} (ID: {sender.id})")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = event.message.text

                if not message_text:
                    print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return

                print(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {message_text[:100]}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î –¥–ª—è —á–∞—Ç–∞
                self.save_message_to_db(sender.id, event.message.id, message_text)

                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—à –±–æ—Ç
                try:
                    await self.client.send_message(
                        config.OUR_BOT_ID,
                        message_text
                    )

                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –±–æ—Ç {config.OUR_BOT_ID}")

                except Exception as forward_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {forward_error}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def run_until_disconnected(self):
        """
        –ó–∞–ø—É—Å–∫ userbot –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        """
        if not self.client:
            await self.initialize()

        await self.start()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤ –∏–∑ Telegram
        bot_names_list = []
        for bot_id in config.MONITOR_BOT_IDS:
            try:
                bot_entity = await self.resolve_entity(bot_id)
                bot_name = bot_entity.first_name or f"ID:{bot_id}"
                bot_names_list.append(f"{bot_name} (@{bot_entity.username})")
            except Exception:
                bot_names_list.append(f"ID:{bot_id}")

        bot_names = ', '.join(bot_names_list)

        print("üîÑ Userbot —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        print(f"üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –±–æ—Ç—ã: {bot_names}")
        print(f"üéØ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –±–æ—Ç ID: {config.OUR_BOT_ID}")
        print("‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –±–æ—Ç–æ–≤...")

        await self.client.run_until_disconnected()

    async def load_bot_history(self, bot_id: int, bot_username: str, days: int = None):
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞

        Args:
            bot_id: ID –±–æ—Ç–∞ –≤ –ë–î
            bot_username: Username –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "@CardXabarBot")
            days: –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π (None = –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è)

        Returns:
            {loaded: int, saved: int, skipped: int, errors: int}
        """
        from history_loader import HistoryLoader

        if not self.client or not self.client.is_connected():
            return {
                'loaded': 0,
                'saved': 0,
                'skipped': 0,
                'errors': 1,
                'error_message': 'Userbot –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'
            }

        try:
            loader = HistoryLoader(self.client)
            result = await loader.load_bot_history(
                bot_id=bot_id,
                bot_username=bot_username,
                days=days
            )
            loader.close()
            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return {
                'loaded': 0,
                'saved': 0,
                'skipped': 0,
                'errors': 1,
                'error_message': str(e)
            }

    async def resolve_entity(self, identifier):
        """–í–µ—Ä–Ω—É—Ç—å InputPeer –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
        if identifier is None:
            raise ValueError("identifier is required")

        if isinstance(identifier, (int,)):
            entity = await self.client.get_entity(identifier)
            return self._to_input_peer(entity)

        value = str(identifier)
        if value.startswith('@'):
            return await self.client.get_input_entity(value)

        try:
            numeric = int(value)
        except Exception:
            entity = await self.client.get_entity(value)
            return self._to_input_peer(entity)

        if value.startswith('-100'):
            entity = await self.client.get_entity(PeerChannel(numeric))
            return InputPeerChannel(entity.id, entity.access_hash)

        try:
            entity = await self.client.get_entity(numeric)
            return self._to_input_peer(entity)
        except Exception:
            entity = await self.client.get_entity(PeerChat(numeric))
            return InputPeerChat(entity.id)

    def _to_input_peer(self, entity):
        if isinstance(entity, (Channel, PeerChannel)):
            return InputPeerChannel(entity.id, entity.access_hash)
        if isinstance(entity, (Chat, PeerChat)):
            return InputPeerChat(entity.id)
        if isinstance(entity, (User, PeerUser)) or getattr(entity, 'bot', False) or hasattr(entity, 'first_name'):
            return InputPeerUser(entity.id, getattr(entity, 'access_hash', None))
        # fallback –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–µ–π Telethon (Channel / User –∏ —Ç.–ø.)
        if getattr(entity, 'access_hash', None) is not None:
            # –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ —Ç–∏–ø—É
            if getattr(entity, 'megagroup', False) or getattr(entity, 'broadcast', False):
                return InputPeerChannel(entity.id, entity.access_hash)
            return InputPeerUser(entity.id, entity.access_hash)
        return InputPeerChat(entity.id)

    async def fetch_message_text(self, chat_id, message_id):
        """–ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ chat/message id"""
        if not self.client:
            await self.initialize()

        if not self.client.is_connected():
            await self.client.connect()

        entity = await self.resolve_entity(chat_id)

        try:
            target_id = int(str(message_id))
        except ValueError:
            target_id = message_id

        message = await self.client.get_messages(entity, ids=target_id)
        if not message:
            raise ValueError('Message not found in Telegram history')

        text = getattr(message, 'message', None) or getattr(message, 'raw_text', None) or ''
        if not text:
            raise ValueError('Message has no text content')

        return text

    async def get_chat_meta(self, chat_id):
        if not self.client:
            await self.initialize()

        if not self.client.is_connected():
            await self.client.connect()

        peer = await self.resolve_entity(chat_id)
        entity = await self.client.get_entity(peer)

        title = getattr(entity, 'title', None) or getattr(entity, 'first_name', None) or getattr(entity, 'last_name', None)

        return {
            'id': getattr(entity, 'id', None),
            'username': getattr(entity, 'username', None),
            'title': title,
            'bot': getattr(entity, 'bot', False)
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä userbot manager
userbot_manager = UserbotManager()
