"""
patch-017 ¬ß2: OCR Service Flask App

–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:
- POST /ocr/process - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞
- GET /health - healthcheck
"""

import os
import base64
import traceback
from flask import Flask, request, jsonify
from flask_cors import CORS

from preprocessing import preprocess_image
from ocr_engine import extract_text
from classifiers import classify_and_parse


app = Flask(__name__)
CORS(app)


@app.route('/health', methods=['GET'])
def health():
    """
    Healthcheck endpoint
    """
    return jsonify({
        'status': 'healthy',
        'service': 'ocr',
        'version': '1.0.0'
    })


@app.route('/ocr/process', methods=['POST'])
def process_receipt():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞

    Request body:
    {
        "image": "base64-encoded image data",
        "preprocess": true/false (default: true),
        "preprocess_steps": ["resize", "sharpen", "binarize", "denoise"] (optional)
    }

    Response:
    {
        "success": true/false,
        "ocr_result": {
            "text": "—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
            "confidence": 85.5,
            "lines": [...]
        },
        "parsed_data": {
            "classifier": "UzumBankClassifier",
            "data": {
                "operator": "...",
                "amount": 100000,
                "currency": "UZS",
                "datetime": "2025-01-15 14:30:00",
                "card_last4": "1234",
                ...
            },
            "confidence": 85
        },
        "preprocessing": {
            "original_size": [1920, 1080],
            "processed_size": [1200, 675],
            "steps_applied": ["resize", "sharpen", "binarize", "denoise"]
        },
        "error": "..." (–µ—Å–ª–∏ success: false)
    }
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        if not request.json:
            return jsonify({
                'success': False,
                'error': 'Request body must be JSON'
            }), 400

        image_b64 = request.json.get('image')
        if not image_b64:
            return jsonify({
                'success': False,
                'error': 'Missing "image" field in request body'
            }), 400

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        try:
            image_bytes = base64.b64decode(image_b64)
        except Exception as e:
            return jsonify({
                'success': False,
                'error': f'Invalid base64 image data: {str(e)}'
            }), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä (–º–∞–∫—Å 10 –ú–ë)
        max_size_mb = int(os.getenv('MAX_IMAGE_SIZE_MB', 10))
        if len(image_bytes) > max_size_mb * 1024 * 1024:
            return jsonify({
                'success': False,
                'error': f'Image size exceeds {max_size_mb} MB limit'
            }), 400

        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        should_preprocess = request.json.get('preprocess', True)
        preprocessing_metadata = None

        if should_preprocess:
            preprocess_steps = request.json.get('preprocess_steps', None)
            processed_bytes, preprocessing_metadata = preprocess_image(
                image_bytes,
                steps=preprocess_steps
            )
        else:
            processed_bytes = image_bytes

        # OCR - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        ocr_result = extract_text(processed_bytes)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OCR
        if ocr_result['confidence'] < 30:
            return jsonify({
                'success': False,
                'error': 'OCR confidence too low (< 30%)',
                'ocr_result': ocr_result,
                'preprocessing': preprocessing_metadata,
                'suggestion': '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
            }), 422

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥
        try:
            parsed_result = classify_and_parse(ocr_result['text'])
        except ValueError as e:
            # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–∞
            return jsonify({
                'success': False,
                'error': str(e),
                'ocr_result': ocr_result,
                'preprocessing': preprocessing_metadata,
                'suggestion': '–§–æ—Ä–º–∞—Ç —á–µ–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ.'
            }), 422

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞
        if parsed_result['confidence'] < 50:
            # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
            return jsonify({
                'success': True,
                'status': 'draft',
                'ocr_result': ocr_result,
                'parsed_data': parsed_result,
                'preprocessing': preprocessing_metadata,
                'message': '–ß–µ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞.',
                'warning': 'Confidence < 50%'
            }), 200

        # –£—Å–ø–µ—à–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        return jsonify({
            'success': True,
            'status': 'parsed',
            'ocr_result': {
                'text': ocr_result['text'],
                'confidence': ocr_result['confidence']
            },
            'parsed_data': parsed_result,
            'preprocessing': preprocessing_metadata
        }), 200

    except Exception as e:
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞
        print(f"OCR Service Error: {str(e)}")
        traceback.print_exc()

        return jsonify({
            'success': False,
            'error': 'Internal OCR service error',
            'details': str(e)
        }), 500


if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    debug = os.getenv('FLASK_ENV', 'production') == 'development'

    print(f"üîç OCR Service starting on port {port}...")
    print(f"üìä Max image size: {os.getenv('MAX_IMAGE_SIZE_MB', 10)} MB")
    print(f"üåê Tesseract language: {os.getenv('TESSERACT_LANG', 'rus+eng')}")

    app.run(host='0.0.0.0', port=port, debug=debug)
