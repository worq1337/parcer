require('dotenv').config();
const express = require('express');
const cors = require('cors');
const pool = require('./config/database');
const telegramBot = require('./services/telegramBot');

const checkRoutes = require('./routes/checkRoutes');
const operatorRoutes = require('./routes/operatorRoutes');
const adminRoutes = require('./routes/adminRoutes');
const ingestRoutes = require('./routes/ingestRoutes'); // patch-017 ¬ß7
const notificationRoutes = require('./routes/notificationRoutes'); // patch-017 ¬ß5

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors({
  origin: process.env.CORS_ORIGIN || '*'
}));
// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ base64 (–¥–æ 50MB)
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// –ú–∞—Ä—à—Ä—É—Ç—ã API
app.use('/api/checks', checkRoutes);
app.use('/api/operators', operatorRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/ingest', ingestRoutes); // patch-017 ¬ß7
app.use('/api/notifications', notificationRoutes); // patch-017 ¬ß5

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({
    message: 'Receipt Parser API',
    version: '1.0.0',
    endpoints: {
      checks: '/api/checks',
      operators: '/api/operators',
      admin: '/api/admin',
      ingest: '/api/ingest' // patch-017 ¬ß7
    }
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
app.get('/health', async (req, res) => {
  try {
    await pool.query('SELECT 1');
    res.json({
      status: 'ok',
      database: 'connected',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      database: 'disconnected',
      error: error.message
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
  res.status(500).json({
    success: false,
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await pool.query('SELECT NOW()');
    console.log('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, () => {
      console.log(`‚úì –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`‚úì API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
      console.log(`‚úì –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`);
    });

    // –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    telegramBot.init();

    // patch-017 ¬ß5: –ú–∏–Ω—É—Ç–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è OS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    startMinuteSummary();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// patch-017 ¬ß5: –ú–∏–Ω—É—Ç–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ –Ω–æ–≤—ã—Ö —á–µ–∫–∞—Ö
function startMinuteSummary() {
  const eventBus = require('./utils/eventBus');
  let checksAddedThisMinute = [];
  let lastMinuteStart = Date.now();

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–æ–≤
  eventBus.on('check:added', (event) => {
    checksAddedThisMinute.push(event.data);
  });

  // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
  setInterval(() => {
    if (checksAddedThisMinute.length > 0) {
      const totalAmount = checksAddedThisMinute.reduce((sum, check) => sum + parseFloat(check.amount), 0);

      eventBus.emitMinuteSummary({
        count: checksAddedThisMinute.length,
        totalAmount: Math.abs(totalAmount).toFixed(2),
        currency: checksAddedThisMinute[0]?.currency || 'UZS',
        period: {
          start: new Date(lastMinuteStart).toISOString(),
          end: new Date().toISOString()
        },
        checks: checksAddedThisMinute.slice(-5) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —á–µ–∫–æ–≤
      });

      console.log(`üìä –ú–∏–Ω—É—Ç–Ω–∞—è —Å–≤–æ–¥–∫–∞: ${checksAddedThisMinute.length} —á–µ–∫(–æ–≤), ${Math.abs(totalAmount).toFixed(2)} UZS`);

      // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
      checksAddedThisMinute = [];
    }
    lastMinuteStart = Date.now();
  }, 60000); // 60 —Å–µ–∫—É–Ω–¥

  console.log('‚úì –ú–∏–Ω—É—Ç–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  telegramBot.stop();
  await pool.end();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  telegramBot.stop();
  await pool.end();
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('unhandledRejection', (reason, promise) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
startServer();

module.exports = app;
