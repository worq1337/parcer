"""
History Loader for Telegram Userbot
–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è Telethon API
"""

from telethon import TelegramClient
from telethon.tl.types import PeerChannel, PeerChat, PeerUser
from datetime import datetime, timedelta, timezone
import asyncio
import psycopg2
import os
from typing import List, Dict, Optional


class HistoryLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–æ–≤"""

    def __init__(self, client: TelegramClient):
        self.client = client
        self.db_conn = None

    def _get_db_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
        if not self.db_conn or self.db_conn.closed:
            self.db_conn = psycopg2.connect(
                host=os.getenv('DB_HOST', 'postgres'),
                port=os.getenv('DB_PORT', '5432'),
                database=os.getenv('DB_NAME', 'receipt_parser'),
                user=os.getenv('DB_USER', 'postgres'),
                password=os.getenv('DB_PASSWORD', 'postgres')
            )
        return self.db_conn

    async def load_bot_history(
        self,
        bot_id: int,
        bot_username: str,
        limit: Optional[int] = None,
        days: Optional[int] = None
    ) -> Dict:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞

        Args:
            bot_id: ID –±–æ—Ç–∞ –≤ –ë–î
            bot_username: Username –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "@CardXabarBot")
            limit: –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π (None = –≤—Å–µ)
            days: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π (None = –≤—Å–µ)

        Returns:
            {
                'loaded': int,  # –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Telegram
                'saved': int,   # –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î (–Ω–æ–≤—ã—Ö)
                'skipped': int, # –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã)
                'errors': int   # –û—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            }
        """
        messages_data = []
        cutoff_date = datetime.now(timezone.utc) - timedelta(days=days) if days else None

        try:
            # –ü–æ–ª—É—á–∏—Ç—å entity –±–æ—Ç–∞
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç {bot_username} (bot_id={bot_id})...")
            bot_entity = await self._resolve_entity(bot_id, bot_username)

            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
            message_count = 0
            async for message in self.client.iter_messages(
                bot_entity,
                limit=limit,  # None = –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                reverse=False  # –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
            ):
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞—Ç—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                if cutoff_date and message.date < cutoff_date:
                    print(f"‚èπ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞ {days} –¥–Ω–µ–π, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
                    break

                # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if message.text:
                    messages_data.append({
                        'bot_id': bot_id,
                        'telegram_message_id': str(message.id),
                        'text': message.text,
                        'timestamp': message.date
                    })
                    message_count += 1

                    # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if message_count % 50 == 0:
                        print(f"  ... –∑–∞–≥—Ä—É–∂–µ–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages_data)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {bot_username}")

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –±–∞—Ç—á–∞–º–∏
            result = await self._save_messages_to_db(messages_data)

            return {
                'loaded': len(messages_data),
                'saved': result['saved'],
                'skipped': result['skipped'],
                'errors': result['errors']
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç {bot_username}: {e}")
            return {
                'loaded': 0,
                'saved': 0,
                'skipped': 0,
                'errors': 1,
                'error_message': str(e)
            }

    async def _save_messages_to_db(self, messages: List[Dict]) -> Dict:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î –±–∞—Ç—á–∞–º–∏

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            {saved: int, skipped: int, errors: int}
        """
        saved = 0
        skipped = 0
        errors = 0

        BATCH_SIZE = 100

        conn = self._get_db_connection()
        cursor = conn.cursor()

        try:
            for i in range(0, len(messages), BATCH_SIZE):
                batch = messages[i:i + BATCH_SIZE]

                for msg in batch:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ (–ø–æ bot_id + telegram_message_id)
                        cursor.execute(
                            """
                            SELECT id FROM bot_messages
                            WHERE chat_id = %s AND message_id = %s
                            """,
                            (str(msg['bot_id']), str(msg['telegram_message_id']))
                        )

                        exists = cursor.fetchone()

                        if exists:
                            skipped += 1
                            continue

                        # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        cursor.execute(
                            """
                            INSERT INTO bot_messages
                            (bot_id, telegram_message_id, chat_id, message_id, timestamp, text, status, process_attempts)
                            VALUES (%s, %s, %s, %s, %s, %s, 'new', 0)
                            ON CONFLICT (chat_id, message_id) DO NOTHING
                            """,
                            (
                                str(msg['bot_id']),
                                str(msg['telegram_message_id']),
                                str(msg['bot_id']),
                                str(msg['telegram_message_id']),
                                msg['timestamp'],
                                msg['text']
                            )
                        )
                        saved += 1

                    except Exception as e:
                        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        errors += 1

                # –ö–æ–º–º–∏—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
                conn.commit()

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if i + BATCH_SIZE < len(messages):
                    await asyncio.sleep(0.1)

            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {saved} –Ω–æ–≤—ã—Ö, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ, {errors} –æ—à–∏–±–æ–∫")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
            conn.rollback()
            errors += len(messages) - saved - skipped

        finally:
            cursor.close()

        return {
            'saved': saved,
            'skipped': skipped,
            'errors': errors
        }

    async def _resolve_entity(self, bot_id, bot_username):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ Telegram –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        """
        candidates = [bot_username, bot_id]
        for candidate in candidates:
            if candidate in (None, '', 0):
                continue

            value = str(candidate)

            try:
                if value.startswith('-100'):
                    return await self.client.get_entity(PeerChannel(int(value)))

                if value.startswith('-') or value.isdigit():
                    try:
                        return await self.client.get_entity(int(value))
                    except Exception:
                        return await self.client.get_entity(PeerChat(int(value)))

                if value.startswith('@'):
                    return await self.client.get_entity(value)

                try:
                    return await self.client.get_entity(PeerUser(int(value)))
                except Exception:
                    return await self.client.get_entity(value)
            except Exception:
                continue

        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å Telegram –¥–ª—è {bot_id} / {bot_username}")

    async def load_all_bots_history(
        self,
        bots: List[Dict],
        days: Optional[int] = 30
    ) -> Dict:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤

        Args:
            bots: –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ [{id, username, name}]
            days: –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π

        Returns:
            {
                'total_loaded': int,
                'total_saved': int,
                'bots': {bot_username: {loaded, saved, skipped}}
            }
        """
        results = {}
        total_loaded = 0
        total_saved = 0

        for bot in bots:
            print(f"\n{'='*60}")
            print(f"ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞: {bot['name']} ({bot['username']})")
            print(f"{'='*60}")

            result = await self.load_bot_history(
                bot_id=bot['id'],
                bot_username=bot['username'],
                days=days
            )

            results[bot['username']] = result
            total_loaded += result['loaded']
            total_saved += result['saved']

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏ (Rate Limiting)
            await asyncio.sleep(2)

        return {
            'total_loaded': total_loaded,
            'total_saved': total_saved,
            'bots': results
        }

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        if self.db_conn and not self.db_conn.closed:
            self.db_conn.close()
