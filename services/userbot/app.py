"""
patch-017 ¬ß4: Userbot Service Flask App

API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telethon userbot:
- POST /login - –ª–æ–≥–∏–Ω –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
- POST /start - –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- POST /stop - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
- GET /status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
- GET /health - healthcheck
"""

import asyncio
import threading
from flask import Flask, request, jsonify
from flask_cors import CORS
import config
from userbot import userbot_manager


app = Flask(__name__)
CORS(app)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π event loop –¥–ª—è asyncio
loop = None
userbot_thread = None


def run_userbot_loop():
    """
    –ó–∞–ø—É—Å–∫ event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    """
    global loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_forever()


# –ó–∞–ø—É—Å–∫–∞–µ–º event loop –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
userbot_thread = threading.Thread(target=run_userbot_loop, daemon=True)
userbot_thread.start()


def run_async(coro):
    """
    –•–µ–ª–ø–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ async —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ sync –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Flask
    """
    # –ñ–¥–µ–º –ø–æ–∫–∞ loop —Å–æ–∑–¥–∞—Å—Ç—Å—è (–¥–æ 5 —Å–µ–∫—É–Ω–¥)
    import time
    timeout = 5
    start = time.time()
    while loop is None and (time.time() - start) < timeout:
        time.sleep(0.1)

    if loop is None:
        raise RuntimeError("Event loop not initialized")

    return asyncio.run_coroutine_threadsafe(coro, loop).result()


@app.route('/health', methods=['GET'])
def health():
    """
    Healthcheck endpoint
    """
    return jsonify({
        'status': 'healthy',
        'service': 'userbot',
        'version': '1.0.0'
    })


@app.route('/status', methods=['GET'])
def get_status():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å userbot

    Response:
    {
        "running": true/false,
        "authorized": true/false,
        "user": {
            "id": 123456789,
            "first_name": "–ò–≤–∞–Ω",
            "username": "ivan",
            "phone": "+998901234567"
        }
    }
    """
    try:
        status = run_async(userbot_manager.get_status())
        return jsonify(status)

    except Exception as e:
        return jsonify({
            'running': False,
            'authorized': False,
            'error': str(e)
        }), 500


@app.route('/login', methods=['POST'])
def login():
    """
    –õ–æ–≥–∏–Ω userbot —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    Request body:
    {
        "phone_number": "+998901234567",
        "code": "12345" (optional),
        "password": "2fa_password" (optional)
    }

    Response:
    {
        "success": true,
        "status": "code_sent" | "authorized" | "password_required",
        "user": {...} (–µ—Å–ª–∏ authorized)
    }
    """
    try:
        data = request.json

        phone_number = data.get('phone_number')
        code = data.get('code')
        password = data.get('password')

        if not phone_number:
            return jsonify({
                'success': False,
                'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è phone_number'
            }), 400

        result = run_async(userbot_manager.login(phone_number, code, password))

        if result.get('success'):
            return jsonify(result), 200
        else:
            status_code = 200 if result.get('status') in ['code_sent', 'password_required'] else 400
            return jsonify(result), status_code

    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@app.route('/start', methods=['POST'])
def start_userbot():
    """
    –ó–∞–ø—É—Å–∫ userbot –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

    Response:
    {
        "success": true,
        "message": "Userbot –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –ò–≤–∞–Ω",
        "user": {...}
    }
    """
    try:
        result = run_async(userbot_manager.start())

        if result.get('success'):
            # –ó–∞–ø—É—Å–∫–∞–µ–º userbot –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            asyncio.run_coroutine_threadsafe(
                userbot_manager.run_until_disconnected(),
                loop
            )

            return jsonify(result), 200
        else:
            return jsonify(result), 400

    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@app.route('/stop', methods=['POST'])
def stop_userbot():
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ userbot

    Response:
    {
        "success": true,
        "message": "Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    }
    """
    try:
        result = run_async(userbot_manager.stop())
        return jsonify(result), 200

    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@app.route('/logout', methods=['POST'])
def logout():
    """
    –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ (—É–¥–∞–ª–µ–Ω–∏–µ session)

    Response:
    {
        "success": true,
        "message": "Session —É–¥–∞–ª–µ–Ω–∞"
    }
    """
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º userbot
        run_async(userbot_manager.stop())

        # –£–¥–∞–ª—è–µ–º session —Ñ–∞–π–ª
        import os
        session_file = f"{userbot_manager.session_path}.session"
        if os.path.exists(session_file):
            os.remove(session_file)

        return jsonify({
            'success': True,
            'message': 'Session —É–¥–∞–ª–µ–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω.'
        }), 200

    except Exception as e:
        return jsonify({
            'success': False,
        'error': str(e)
    }), 500


@app.route('/message-text', methods=['POST'])
def message_text():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ chat_id/message_id"""
    try:
        data = request.json or {}
        chat_id = data.get('chat_id') or data.get('chatId')
        message_id = data.get('message_id') or data.get('messageId')

        if not chat_id or not message_id:
            return jsonify({
                'success': False,
                'error': 'chat_id –∏ message_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            }), 400

        text = run_async(userbot_manager.fetch_message_text(chat_id, message_id))

        return jsonify({
            'success': True,
            'text': text
        }), 200

    except ValueError as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 404
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@app.route('/chat-meta', methods=['POST'])
def chat_meta():
    try:
        data = request.json or {}
        chat_id = data.get('chat_id') or data.get('chatId')

        if not chat_id:
            return jsonify({
                'success': False,
                'error': 'chat_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            }), 400

        meta = run_async(userbot_manager.get_chat_meta(chat_id))

        return jsonify({
            'success': True,
            'meta': meta
        }), 200

    except ValueError as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 404
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@app.route('/load-history', methods=['POST'])
def load_history():
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞

    Request body:
    {
        "bot_id": 915326936,
        "bot_username": "@CardXabarBot",
        "days": 30  (optional, None = –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è)
    }

    Response:
    {
        "success": true,
        "loaded": 150,  # –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Telegram
        "saved": 120,   # –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î (–Ω–æ–≤—ã—Ö)
        "skipped": 30,  # –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã)
        "errors": 0     # –û—à–∏–±–æ–∫
    }
    """
    try:
        data = request.json

        bot_id = data.get('bot_id')
        bot_username = data.get('bot_username')
        days = data.get('days')  # None = –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è

        if not bot_id or not bot_username:
            return jsonify({
                'success': False,
                'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è bot_id –∏ bot_username'
            }), 400

        # –í—ã–∑–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ userbot_manager
        result = run_async(
            userbot_manager.load_bot_history(
                bot_id=bot_id,
                bot_username=bot_username,
                days=days
            )
        )

        if 'error_message' in result:
            return jsonify({
                'success': False,
                'error': result['error_message'],
                **result
            }), 500

        return jsonify({
            'success': True,
            **result
        }), 200

    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


if __name__ == '__main__':
    print("üöÄ Userbot Service starting...")
    print(f"üì° –ë—É–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –±–æ—Ç–æ–≤ —Å ID: {config.MONITOR_BOT_IDS}")
    print(f"üéØ –ë—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤ –±–æ—Ç: {config.OUR_BOT_ID}")
    print(f"üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://{config.FLASK_HOST}:{config.FLASK_PORT}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º userbot
    run_async(userbot_manager.initialize())

    # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å userbot –µ—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞...")
        status = run_async(userbot_manager.get_status())
        print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")

        if status.get('authorized'):
            print("‚úÖ Userbot —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
            run_async(userbot_manager.start())

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            print("üöÄ –ó–∞–ø—É—Å–∫ run_until_disconnected –≤ —Ñ–æ–Ω–µ...")
            asyncio.run_coroutine_threadsafe(
                userbot_manager.run_until_disconnected(),
                loop
            )
            print("‚úÖ Userbot –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–∞–Ω–∞–ª—ã!")
        else:
            print("‚ö†Ô∏è Userbot –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–∑–≤–∞—Ç—å POST /login –∏ POST /start")
    except Exception as e:
        import traceback
        print(f"‚ùå –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        print(f"üîç Traceback:\n{traceback.format_exc()}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    app.run(
        host=config.FLASK_HOST,
        port=config.FLASK_PORT,
        debug=config.FLASK_DEBUG
    )
